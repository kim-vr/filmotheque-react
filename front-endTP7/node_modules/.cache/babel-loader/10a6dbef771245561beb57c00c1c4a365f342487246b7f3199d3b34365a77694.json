{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimvr\\\\OneDrive\\\\Documents\\\\IUT\\\\Semestre 4\\\\R4.10\\\\filmotheque\\\\front-endTP7\\\\src\\\\components\\\\GenreList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ContentBox from './ContentBox';\nimport { useLoaderData } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GenreList = () => {\n  _s();\n  const genres = useLoaderData(); // Ce sont les genres chargés de l'API\n  const [moviesByGenre, setMoviesByGenre] = useState({}); // { genreName: movies[] }\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Créez une fonction pour charger les films pour un genre donné\n    const fetchMoviesForGenre = async genre => {\n      try {\n        const response = await fetch(`http://filmotheque.e-mingo.net/api/catalog/movie/?genre=${genre.name}`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const movies = await response.json();\n        setMoviesByGenre(prevMovies => ({\n          ...prevMovies,\n          [genre.name]: movies\n        }));\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n\n    // Pour chaque genre, appelez fetchMoviesForGenre\n    genres.forEach(genre => {\n      fetchMoviesForGenre(genre);\n    });\n\n    // Une fois que toutes les requêtes sont terminées, mettez le chargement sur false\n    Promise.all(genres.map(genre => fetchMoviesForGenre(genre))).then(() => {\n      setLoading(false);\n    }).catch(error => {\n      setError(error.message);\n      setLoading(false);\n    });\n  }, [genres]); // Les genres chargés sont les dépendances\n\n  // Affichez un indicateur de chargement ou un message d'erreur si nécessaire\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 21\n  }, this);\n\n  // Mappez sur les genres et affichez une ContentBox pour chaque genre\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: genres.map(genre => /*#__PURE__*/_jsxDEV(ContentBox, {\n      title: genre.name,\n      movies: moviesByGenre[genre.name] || []\n    }, genre.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_s(GenreList, \"70lcAJAEqsBuWEX5I/1ncGpubpI=\", false, function () {\n  return [useLoaderData];\n});\n_c = GenreList;\nexport default GenreList;\nvar _c;\n$RefreshReg$(_c, \"GenreList\");","map":{"version":3,"names":["React","useEffect","useState","ContentBox","useLoaderData","jsxDEV","_jsxDEV","Fragment","_Fragment","GenreList","_s","genres","moviesByGenre","setMoviesByGenre","loading","setLoading","error","setError","fetchMoviesForGenre","genre","response","fetch","name","ok","Error","movies","json","prevMovies","message","forEach","Promise","all","map","then","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","title","_c","$RefreshReg$"],"sources":["C:/Users/kimvr/OneDrive/Documents/IUT/Semestre 4/R4.10/filmotheque/front-endTP7/src/components/GenreList.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ContentBox from './ContentBox';\r\nimport { useLoaderData } from 'react-router-dom';\r\n\r\nconst GenreList = () => {\r\n  const genres = useLoaderData(); // Ce sont les genres chargés de l'API\r\n  const [moviesByGenre, setMoviesByGenre] = useState({}); // { genreName: movies[] }\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Créez une fonction pour charger les films pour un genre donné\r\n    const fetchMoviesForGenre = async (genre) => {\r\n      try {\r\n        const response = await fetch(`http://filmotheque.e-mingo.net/api/catalog/movie/?genre=${genre.name}`);\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const movies = await response.json();\r\n        setMoviesByGenre(prevMovies => ({ ...prevMovies, [genre.name]: movies }));\r\n      } catch (error) {\r\n        setError(error.message);\r\n      }\r\n    };\r\n\r\n    // Pour chaque genre, appelez fetchMoviesForGenre\r\n    genres.forEach(genre => {\r\n      fetchMoviesForGenre(genre);\r\n    });\r\n\r\n    // Une fois que toutes les requêtes sont terminées, mettez le chargement sur false\r\n    Promise.all(genres.map(genre => fetchMoviesForGenre(genre))).then(() => {\r\n      setLoading(false);\r\n    }).catch(error => {\r\n      setError(error.message);\r\n      setLoading(false);\r\n    });\r\n  }, [genres]); // Les genres chargés sont les dépendances\r\n\r\n  // Affichez un indicateur de chargement ou un message d'erreur si nécessaire\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  // Mappez sur les genres et affichez une ContentBox pour chaque genre\r\n  return (\r\n    <>\r\n      {genres.map(genre => (\r\n        <ContentBox key={genre.name} title={genre.name} movies={moviesByGenre[genre.name] || []} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GenreList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}